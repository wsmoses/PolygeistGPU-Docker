#!/usr/bin/env python
# coding: utf-8

# In[3]:


import pandas as pd
from scipy.stats import gmean
import numpy as np
import matplotlib.pyplot as plt
import os, sys

import inspect
from scipy.stats import gmean


plt.rcParams['figure.figsize'] = [30, 10]
plt.rcParams['figure.dpi'] = 400
plt.rc('font', family='serif', size='18')


# In[4]:


mcuda_results = {
"./polygeist/a.inner-serialize.out": {
128: {
1:
[0.004488,0.004457,0.004460,0.004453,0.004458,0.004460,0.004489,0.004394,0.004458,0.004485,],
2:
[0.002234,0.002248,0.002232,0.002256,0.002245,0.002235,0.002249,0.002233,0.002233,0.002252,],
4:
[0.001175,0.001123,0.001124,0.001138,0.001124,0.001132,0.001124,0.001142,0.001123,0.001125,],
8:
[0.000569,0.000601,0.000569,0.000568,0.000570,0.000570,0.000569,0.000576,0.000570,0.000571,],
16:
[0.000293,0.000292,0.000292,0.000293,0.000293,0.000332,0.000292,0.000292,0.000326,0.000292,],
32:
[0.000319,0.000293,0.000294,0.000295,0.000294,0.000293,0.000293,0.000294,0.000294,0.000294,],
},
256: {
1:
[0.013598,0.010854,0.009859,0.011008,0.009862,0.011186,0.010141,0.010726,0.011208,0.009955,],
2:
[0.010533,0.007164,0.011024,0.010287,0.007174,0.006357,0.006008,0.010982,0.008428,0.009430,],
4:
[0.006989,0.007907,0.007310,0.007794,0.007972,0.007494,0.007506,0.008368,0.007967,0.007195,],
8:
[0.004492,0.004503,0.004486,0.004489,0.004498,0.004492,0.004501,0.004507,0.004493,0.004508,],
16:
[0.002272,0.002254,0.002284,0.002275,0.002249,0.002278,0.002267,0.002251,0.002279,0.002251,],
32:
[0.001181,0.001146,0.001136,0.001180,0.001137,0.001178,0.001165,0.001136,0.001134,0.001134,],
},
512: {
1:
[0.082092,0.081984,0.082217,0.082036,0.081978,0.082103,0.082026,0.082026,0.082098,0.082086,],
2:
[0.041004,0.040966,0.041021,0.040939,0.041030,0.040934,0.041042,0.040923,0.041022,0.040963,],
4:
[0.020734,0.020507,0.020615,0.020731,0.020550,0.020493,0.020522,0.020516,0.020513,0.020469,],
8:
[0.014598,0.011185,0.010248,0.010247,0.013781,0.014122,0.010314,0.014111,0.013750,0.014104,],
16:
[0.011248,0.010896,0.011703,0.011104,0.011275,0.011060,0.011255,0.011115,0.010992,0.011394,],
32:
[0.008768,0.007361,0.008906,0.007515,0.007723,0.007542,0.008047,0.007390,0.007510,0.007399,],
},
1024: {
1:
[0.675590,0.675491,0.675416,0.675678,0.675565,0.674148,0.662982,0.663024,0.663045,0.662995,],
2:
[0.331349,0.331187,0.331387,0.331226,0.331277,0.331341,0.331209,0.331279,0.331282,0.331181,],
4:
[0.165178,0.167094,0.167201,0.167106,0.166948,0.166926,0.166690,0.166965,0.166712,0.167004,],
8:
[0.083362,0.083378,0.083357,0.083361,0.083360,0.083349,0.082483,0.082622,0.082745,0.082617,],
16:
[0.041175,0.041192,0.041242,0.041139,0.041203,0.041227,0.041539,0.041528,0.041157,0.041202,],
32:
[0.021061,0.020672,0.020714,0.020648,0.020939,0.020877,0.020872,0.020889,0.020885,0.020880,],
},
2048: {
1:
[5.305300,5.304882,5.305140,5.305131,5.304833,5.305195,5.303978,5.305403,5.305254,5.304964,],
2:
[2.649105,2.648727,2.648275,2.648917,2.648245,2.649188,2.649584,2.649200,2.648261,2.649792,],
4:
[1.324803,1.325019,1.324667,1.324421,1.323974,1.324444,1.324873,1.324996,1.324331,1.324971,],
8:
[0.665903,0.661051,0.661403,0.660752,0.661344,0.661324,0.661556,0.661009,0.662113,0.661407,],
16:
[0.329300,0.330039,0.333336,0.329374,0.329311,0.329296,0.329509,0.329333,0.329354,0.329249,],
32:
[0.164912,0.164999,0.164966,0.166214,0.164932,0.164886,0.166442,0.164917,0.164911,0.164886,],
},
},
"./mcuda/a.out": {
128: {
1:
[0.001511,0.001675,0.002296,0.002434,0.003146,0.004073,0.005294,0.005174,0.005485,0.005795,],
2:
[0.002754,0.002741,0.002745,0.002777,0.002737,0.002737,0.002745,0.002745,0.002738,0.002741,],
4:
[0.001474,0.001394,0.001396,0.001386,0.001383,0.001390,0.001375,0.001387,0.001989,0.001377,],
8:
[0.000727,0.000692,0.000695,0.000701,0.000707,0.000732,0.000694,0.000817,0.000885,0.000698,],
16:
[0.000378,0.000355,0.000452,0.000371,0.000357,0.000354,0.000357,0.000372,0.000374,0.000377,],
32:
[0.000372,0.000358,0.000355,0.000371,0.000375,0.000375,0.000356,0.000361,0.000381,0.000353,],
},
256: {
1:
[0.015022,0.011807,0.011831,0.012118,0.012174,0.011817,0.012449,0.011826,0.012374,0.011859,],
2:
[0.011032,0.012530,0.008157,0.007008,0.007351,0.008709,0.008370,0.010983,0.007257,0.006161,],
4:
[0.008788,0.008568,0.008488,0.007802,0.007614,0.006310,0.007794,0.009098,0.009147,0.008152,],
8:
[0.005376,0.005391,0.005654,0.005395,0.005725,0.005696,0.005391,0.005439,0.005367,0.005365,],
16:
[0.002868,0.002874,0.002706,0.002726,0.002719,0.002843,0.002725,0.003444,0.002719,0.002730,],
32:
[0.001718,0.001462,0.001369,0.001364,0.002007,0.001717,0.001368,0.001388,0.001444,0.001370,],
},
512: {
1:
[0.094894,0.095268,0.095018,0.096734,0.094856,0.094758,0.095040,0.095029,0.095497,0.095138,],
2:
[0.047829,0.047698,0.047631,0.047454,0.047405,0.047744,0.047628,0.047701,0.047764,0.047958,],
4:
[0.023939,0.024084,0.023814,0.023909,0.023727,0.023811,0.023789,0.024051,0.023842,0.023811,],
8:
[0.014799,0.014887,0.015144,0.017224,0.014957,0.014991,0.015054,0.012403,0.014477,0.014890,],
16:
[0.012134,0.012392,0.011725,0.012006,0.012154,0.012252,0.012347,0.012197,0.012073,0.011641,],
32:
[0.009280,0.008651,0.007547,0.006416,0.008271,0.006682,0.007923,0.008514,0.012767,0.009763,],
},
1024: {
1:
[0.788256,0.789048,0.788786,0.788752,0.788258,0.755886,0.756752,0.756120,0.756786,0.759987,],
2:
[0.380600,0.380428,0.380511,0.380660,0.402071,0.380353,0.380553,0.382170,0.380749,0.380637,],
4:
[0.189489,0.189294,0.191659,0.190849,0.189319,0.203262,0.189286,0.190047,0.199463,0.189540,],
8:
[0.095697,0.099762,0.095365,0.094594,0.120901,0.100399,0.094603,0.102608,0.095072,0.104605,],
16:
[0.048037,0.047842,0.047841,0.050125,0.047335,0.047948,0.047900,0.049326,0.049813,0.048024,],
32:
[0.031524,0.025493,0.031523,0.030608,0.023869,0.025204,0.025267,0.030839,0.023748,0.025767,],
},
2048: {
1:
[6.066122,6.069847,6.068145,6.145773,6.069253,6.071364,6.067245,6.070275,6.074226,6.072844,],
2:
[3.043695,3.059116,3.042295,3.044069,3.043746,3.043929,3.052641,3.043418,3.073843,3.043867,],
4:
[1.534981,1.537932,1.519125,1.518171,1.518373,1.523056,1.519468,1.518358,1.610424,1.534744,],
8:
[0.767955,0.759500,0.769565,1.097492,0.769879,0.771932,0.767204,0.765690,0.767628,0.824258,],
16:
[0.383910,0.404933,0.384309,0.379613,0.384144,0.504453,0.383607,0.568916,0.379737,0.403130,],
32:
[0.201512,0.272751,0.274349,0.279732,0.202100,0.192199,0.201858,0.213861,0.282369,0.191661,],
},
},
"./polygeist/a.out": {
128: {
1:
[0.001557,0.001614,0.001627,0.002049,0.002821,0.003773,0.005011,0.005639,0.005521,0.005393,],
2:
[0.002827,0.002849,0.002851,0.002838,0.002830,0.002832,0.002845,0.002825,0.002843,0.002830,],
4:
[0.001450,0.001453,0.001430,0.001432,0.001444,0.001434,0.001420,0.001430,0.001445,0.001434,],
8:
[0.000765,0.000729,0.000739,0.000718,0.000717,0.000722,0.000728,0.000717,0.000720,0.000717,],
16:
[0.000366,0.000366,0.000368,0.000386,0.000367,0.000374,0.000366,0.000366,0.000368,0.000368,],
32:
[0.000368,0.000369,0.000369,0.000368,0.000367,0.000368,0.000369,0.000368,0.000369,0.000369,],
},
256: {
1:
[0.015099,0.012785,0.012525,0.012306,0.012589,0.012305,0.012838,0.012311,0.012303,0.012606,],
2:
[0.011690,0.007431,0.006418,0.006641,0.007455,0.008153,0.012104,0.011884,0.007283,0.006145,],
4:
[0.008631,0.008340,0.009521,0.009217,0.008898,0.009324,0.008183,0.009503,0.007433,0.007444,],
8:
[0.005599,0.005595,0.005452,0.005172,0.005588,0.005592,0.005583,0.005573,0.005494,0.005598,],
16:
[0.002811,0.002806,0.002805,0.002797,0.002808,0.002819,0.002801,0.002847,0.002821,0.002820,],
32:
[0.001408,0.001434,0.001410,0.001448,0.001409,0.001460,0.001459,0.001459,0.001445,0.001444,],
},
512: {
1:
[0.098947,0.099202,0.098996,0.099353,0.099133,0.099296,0.099213,0.099211,0.099292,0.099217,],
2:
[0.049599,0.049641,0.049662,0.049522,0.049471,0.049593,0.049515,0.049626,0.049672,0.049466,],
4:
[0.024799,0.024783,0.024848,0.024797,0.024805,0.024802,0.024807,0.024776,0.024791,0.024884,],
8:
[0.014490,0.015188,0.014848,0.015228,0.015536,0.012441,0.012481,0.012440,0.015256,0.015066,],
16:
[0.012732,0.012913,0.012682,0.012007,0.012559,0.012321,0.012205,0.012024,0.012241,0.012705,],
32:
[0.009373,0.009284,0.009305,0.008381,0.007576,0.006936,0.007551,0.006781,0.007342,0.007129,],
},
1024: {
1:
[0.819127,0.819536,0.817780,0.822715,0.807068,0.792162,0.792330,0.792498,0.792094,0.794427,],
2:
[0.395652,0.395777,0.395646,0.395754,0.395782,0.395748,0.395988,0.395805,0.395636,0.395835,],
4:
[0.197615,0.197804,0.197680,0.197789,0.197959,0.197771,0.197710,0.197754,0.197836,0.197548,],
8:
[0.098855,0.098715,0.098853,0.098776,0.098838,0.098674,0.098733,0.098634,0.098745,0.098791,],
16:
[0.049345,0.049426,0.049460,0.049487,0.049283,0.049386,0.049373,0.049342,0.049517,0.049472,],
32:
[0.024722,0.024982,0.024867,0.024857,0.024912,0.025090,0.024724,0.024856,0.024929,0.024708,],
},
2048: {
1:
[6.353953,6.353025,6.367183,6.348788,6.367612,6.352423,6.366935,6.352988,6.352469,6.354456,],
2:
[3.171590,3.179360,3.170474,3.172744,3.171634,3.172411,3.172926,3.186877,3.172493,3.171119,],
4:
[1.586485,1.585055,1.587063,1.586392,1.587724,1.586268,1.586182,1.585964,1.587580,1.584644,],
8:
[0.794014,0.792402,0.792103,0.790906,0.792364,0.792424,0.792436,0.792595,0.794183,0.792332,],
16:
[0.395331,0.395191,0.395470,0.395431,0.395188,0.395249,0.395259,0.395040,0.395461,0.395425,],
32:
[0.198370,0.197828,0.204800,0.198351,0.199337,0.198318,0.198043,0.198260,0.199040,0.198211,],
},
},
}


# In[5]:


df = pd.DataFrame([(name, thread, batch, time) for name, data in mcuda_results.items() for batch, v in data.items() for thread, run in v.items() for time in run],
                columns=["Name","Threads","BatchSize", "Time"])
df = df.set_index(['Name', 'Threads', 'BatchSize'])
df = df.groupby(['Name', 'Threads', 'BatchSize']).median()
df


# In[6]:


mcuda = np.array([[df.loc[("./mcuda/a.out", thread, batch)][0] for thread in np.array(df.groupby(['Threads']).agg(gmean).index)] for batch in np.array(df.groupby(['BatchSize']).agg(gmean).index[::-1])])
polyg = np.array([[df.loc[("./polygeist/a.out", thread, batch)][0] for thread in np.array(df.groupby(['Threads']).agg(gmean).index)] for batch in np.array(df.groupby(['BatchSize']).agg(gmean).index[::-1])])
polyser = np.array([[df.loc[("./polygeist/a.inner-serialize.out", thread, batch)][0] for thread in np.array(df.groupby(['Threads']).agg(gmean).index)] for batch in np.array(df.groupby(['BatchSize']).agg(gmean).index[::-1])])

# ./polygeist/a.inner-serialize.out


# In[ ]:





# In[7]:


df.loc[("./mcuda/a.out", 1, 256)]


# In[8]:


polyser


# In[9]:


fig = plt.figure(figsize=(12, 5))

polyg = mcuda / polyg
polyser = mcuda / polyser
mcuda /= mcuda
resultant = np.array([polyg, mcuda, polyser])
min_val, max_val = np.amin(resultant), np.amax(resultant)
max_val = 1.5
axs = fig.subplots(1, 4, gridspec_kw={"width_ratios":[1, 1, 1, 0.05]})

colors = ["white", "red", "yellow", "black"]
levels = [100, 150, 200, 300]
mp = axs[0].imshow(polyg, aspect='auto', vmin=min_val, vmax=max_val)
mp2 = axs[0].contour(polyg, aspect='auto', vmin=min_val, vmax=max_val,colors=colors, levels=levels)


axs[1].imshow(polyser, aspect='auto', vmin=min_val, vmax=max_val)
axs[1].contour(polyser, aspect='auto', vmin=min_val, vmax=max_val,colors=colors, levels=levels)


axs[2].imshow(mcuda, aspect='auto', vmin=min_val, vmax=max_val)
axs[2].contour(mcuda, aspect='auto', vmin=min_val, vmax=max_val,colors=colors, levels=levels)


for i, ax in enumerate(axs[:-1]):
    ax.set_xticks(np.arange(len(np.array(df.groupby(['Threads']).agg(gmean).index))))
    ax.set_xticklabels(np.array(df.groupby(['Threads']).agg(gmean).index))
    
    ax.set_yticks(np.arange(len(np.array(df.groupby(['BatchSize']).agg(gmean).index))))
    ax.set_yticklabels(np.array(df.groupby(['BatchSize']).agg(gmean).index[::-1]))
    ax.set_ylabel('Batch Size')
        
    ax.set_title(["PolyG", "PolySer", "MCUDA"][i])
    
    ax.set_xlabel('Thread Count')
    
# fig.subplots_adjust(right=0.85)
# cbar_ax = fig.add_axes([0.88, 0.15, 0.04, 0.7])
cbar = fig.colorbar(mp, cax=axs[-1]) #axs[0], cax=cbar_ax)

cbar.add_lines(mp2)

fig.savefig('mcuda_full.pdf', bbox_inches='tight')


# In[10]:


df0 = df.reset_index(level='Name')
ndf = (df0.loc[df0['Name'] == './mcuda/a.out']).drop(columns=["Name"]).rename(columns={"Time":"MCuda"}).merge(
(df0.loc[df0['Name'] == './polygeist/a.out']).drop(columns=["Name"]).rename(columns={"Time":"PolygeistInnerPar"}),
    left_index=True,right_index=True
).merge((df0.loc[df0['Name'] == './polygeist/a.inner-serialize.out']).drop(columns=["Name"]).rename(columns={"Time":"PolygeistInnerSer"}),
    left_index=True,right_index=True
)
ndf


# In[28]:


gmean([0.809486, 1.111075, 1.158096, 1.144186])


# In[27]:


gmean([1.244898, 1.240473, 1.114764, 1.227579, 1.261065])


# In[25]:


(ndf['MCuda'] / ndf['PolygeistInnerSer'])


# In[22]:


gmean([1.094783, 0.954726, 0.957893, 0.966749, 0.955390])


# In[23]:


gmean([0.993216, 0.980270, 1.109605, 1.030891, 1.048635])


# In[20]:


ndf['MCuda'] / ndf['PolygeistInnerPar']


# In[13]:


fig = plt.figure(figsize=(12, 4))
left, right = fig.subplots(1, 2)
left = ndf.groupby(['Threads']).agg(gmean).plot(ax=left, marker='x', zorder=2)
left.set_yscale('log')
left.set_ylabel('Runtime (log, s)')
yticks = [0.01, 0.02, 0.04, 0.08, 0.16]
yticks_minor = [0.02, 0.08]
#left.set_yticks(yticks, map(str, yticks))
#left.set_yticks(yticks_minor, map(str, yticks_minor), minor=True)
left.set_xlabel('# threads')
nthreads = np.unique(ndf.reset_index()['Threads'])
left.set_xticks(nthreads, map(str, nthreads))
left.grid(which='both', zorder=1, axis='y')
left.get_legend().set_bbox_to_anchor((1.0, 1.05))

right = ndf.groupby(['BatchSize']).agg(gmean).plot(ax=right, zorder=2, marker='x')
right.set_ylabel('Runtime (log, s)')
right.set_yscale('log')
yticks = [0.001, 0.01, 0.1, 1]
yticks_minor = [0.003, 0.03, 0.3, 3]
#right.set_yticks(yticks, map(str, yticks))
#right.set_yticks(yticks_minor, map(str, yticks_minor), minor=True)
right.set_xlabel('Size')
right.grid(which='both', zorder=1, axis='y')
right.get_legend().remove()
plt.subplots_adjust(wspace=0.3)

plt.savefig('mcuda.pdf', bbox_inches='tight')
